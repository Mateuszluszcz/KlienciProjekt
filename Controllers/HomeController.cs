using Microsoft.AspNetCore.Mvc;using Microsoft.EntityFrameworkCore;using System.Diagnostics;using WebApplication2.Models;using PESEL;using PESEL.Models;using PESEL.Validators.Impl;using System.Reflection.Metadata.Ecma335;using ClosedXML.Excel;using System.Text;using System.ComponentModel.DataAnnotations;using IronPdf;namespace WebApplication2.Controllers{    public class HomeController : Controller    {        private readonly ILogger<HomeController> _logger;        private readonly AppDbContext _context;        public HomeController(ILogger<HomeController> logger, AppDbContext context)        {            _logger = logger;            _context = context;        }        public async Task<IActionResult> Index()        {            try            {                var klienci = await _context.Klienci.OrderBy(k => k.ID).ToListAsync();                return View(klienci);            }            catch (Exception ex)            {                _logger.LogError(ex, "Error retrieving data from database");                return StatusCode(500, "Internal server error.");            }        }        public IActionResult Privacy()        {            return View();        }        public IActionResult Create()        {            return View();        }		private bool TryParsePesel(string pesel, out int birthYear, out int gender)		{			birthYear = 0;			gender = 0;			if (string.IsNullOrEmpty(pesel) || pesel.Length != 11 || !pesel.All(char.IsDigit))				return false;			int[] weights = { 1, 3, 7, 9, 1, 3, 7, 9, 1, 3 };			int sum = 0;			for (int i = 0; i < 10; i++)				sum += weights[i] * (pesel[i] - '0');			int control = (10 - (sum % 10)) % 10;			if (control != (pesel[10] - '0'))				return false;			int yearPart = int.Parse(pesel.Substring(0, 2));			int monthPart = int.Parse(pesel.Substring(2, 2));			int month = monthPart;			if (month >= 1 && month <= 12)				birthYear = 1900 + yearPart;			else if (month >= 21 && month <= 32)			{				birthYear = 2000 + yearPart;				month -= 20;			}			else			{				return false;			}			int genderDigit = int.Parse(pesel.Substring(9, 1));			gender = (genderDigit % 2 == 0) ? 0 : 1;			return true;		}		[HttpPost]		[ValidateAntiForgeryToken]		public async Task<IActionResult> Create(Klienci klient)		{			if (!ModelState.IsValid)				return View(klient);			if (!TryParsePesel(klient.PESEL, out int birthYear, out int gender))			{				ModelState.AddModelError("PESEL", "Numer PESEL jest nieprawidłowy");				return View(klient);			}			klient.BirthYear = birthYear;			klient.Płec = gender;			var existingClient = await _context.Klienci.FirstOrDefaultAsync(c => c.PESEL == klient.PESEL);			if (existingClient != null)			{				existingClient.Name = klient.Name;				existingClient.Surname = klient.Surname;				existingClient.BirthYear = birthYear;				existingClient.Płec = gender;			 				_context.Klienci.Update(existingClient);				//_context.Klienci.Remove(klient);			}			else			{				_context.Klienci.Add(klient);			}			await _context.SaveChangesAsync();			return RedirectToAction("Index");		}		//[HttpPost]		//[ValidateAntiForgeryToken]		//public async Task<IActionResult> Edit(Klienci klient)		//{		//	if (ModelState.IsValid)		//	{		//		_context.Klienci.Update(klient); 		//		await _context.SaveChangesAsync();		//		return RedirectToAction(nameof(Index));		//	}		//	return View(klient);		//}		// POST: Movies/Edit/5		// To protect from overposting attacks, enable the specific properties you want to bind to.		// For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.		//[HttpPost]		//[ValidateAntiForgeryToken]		public async Task<IActionResult> Edit(int? id)        {            if (id == null)            {                return NotFound();            }            var klient = await _context.Klienci.FindAsync(id);            if (klient == null)            {                return NotFound();            }            return View(klient);        }		[HttpPost]		[ValidateAntiForgeryToken]		public async Task<IActionResult> Edit(int id, Klienci model)		{			if (!ModelState.IsValid)				return View(model);			if (!TryParsePesel(model.PESEL, out int birthYear, out int gender))			{				ModelState.AddModelError("PESEL", "Numer PESEL jest nieprawidłowy");				return View(model);			}			var klient = await _context.Klienci.FindAsync(id);			if (klient == null)				return NotFound();			var existingClient = await _context.Klienci				.FirstOrDefaultAsync(c => c.PESEL == model.PESEL && c.ID != id);			if (existingClient != null)			{				existingClient.Name = model.Name;				existingClient.Surname = model.Surname;				existingClient.BirthYear = birthYear;				existingClient.Płec = gender;				_context.Klienci.Update(existingClient);				_context.Klienci.Remove(klient);			}			else			{				klient.Name = model.Name;				klient.Surname = model.Surname;				klient.PESEL = model.PESEL;				klient.BirthYear = birthYear;				klient.Płec = gender;				_context.Klienci.Update(klient);			}			await _context.SaveChangesAsync();			return RedirectToAction(nameof(Index));		}		private bool KlientExists(int id)        {            return _context.Klienci.Any(e => e.ID == id);        }        public async Task<IActionResult> Delete(int id)        {            var klient = await _context.Klienci.FindAsync(id);            if (klient != null)            {                _context.Klienci.Remove(klient);                await _context.SaveChangesAsync();                return RedirectToAction(nameof(Index));            }            return View(klient);        }        public IActionResult ImportExport()        {            return View();		}		//        if (!TryParsePesel(client.PESEL, out int birthYear, out int gender))		//{		//    continue; 		//}		//client.BirthYear = birthYear;		//client.Płec = gender;		[HttpPost]		public async Task<IActionResult> Import(IFormFile file, string fileType)		{			if (file == null || file.Length == 0)				return BadRequest("Select a file");			var clients = new List<Klienci>();			var invalidClients = new List<string>();			using (var stream = new MemoryStream())			{				await file.CopyToAsync(stream);				if (fileType == "xlsx")				{					using var workbook = new XLWorkbook(stream);					var worksheet = workbook.Worksheets.First();					var rows = worksheet.RangeUsed().RowsUsed().Skip(1);					foreach (var row in rows)					{						var pesel = row.Cell(3).GetValue<string>().Trim();						if (!TryParsePesel(pesel, out int birthYear, out int gender))						{							invalidClients.Add($"{row.Cell(1).GetValue<string>()}" +								$" {row.Cell(2).GetValue<string>()} - PESEL niepoprawny");							continue;						}						var existingClient = await _context.Klienci.FirstOrDefaultAsync(c => c.PESEL == pesel);						if (existingClient != null)						{							existingClient.Name = row.Cell(1).GetValue<string>();							existingClient.Surname = row.Cell(2).GetValue<string>();							existingClient.BirthYear = birthYear;							existingClient.Płec = gender;							_context.Klienci.Update(existingClient);						}						else						{							clients.Add(new Klienci							{								Name = row.Cell(1).GetValue<string>(),								Surname = row.Cell(2).GetValue<string>(),								PESEL = pesel,								BirthYear = birthYear,								Płec = gender							});						}					}				}				else if (fileType == "csv")				{					stream.Position = 0;					using var reader = new StreamReader(stream, Encoding.UTF8);					var csvLines = reader.ReadToEnd().Split('\n').Skip(1);					foreach (var line in csvLines)					{						var values = line.Split(',');						if (values.Length >= 3 && !string.IsNullOrWhiteSpace(values[0]))						{							var pesel = values[2].Trim();							if (!TryParsePesel(pesel, out int birthYear, out int gender))							{								invalidClients.Add($"{values[0].Trim()} {values[1].Trim()} - PESEL niepoprawny");								continue;							}							var existingClient = await _context.Klienci.FirstOrDefaultAsync(c => c.PESEL == pesel);							if (existingClient != null)							{								existingClient.Name = values[0].Trim();								existingClient.Surname = values[1].Trim();								existingClient.BirthYear = birthYear;								existingClient.Płec = gender;								_context.Klienci.Update(existingClient);							}							else							{								clients.Add(new Klienci								{									Name = values[0].Trim(),									Surname = values[1].Trim(),									PESEL = pesel,									BirthYear = birthYear,									Płec = gender								});							}						}					}				}			}			if (clients.Count > 0)			{				_context.Klienci.AddRange(clients);			}			await _context.SaveChangesAsync();			if (invalidClients.Count > 0)			{				TempData["InvalidClients"] = string.Join("<br/>", invalidClients);			}			return RedirectToAction("Index");		}		[HttpGet]        public async Task<IActionResult> Export(string fileType)        {            var clients = await _context.Klienci.ToListAsync();            if (fileType == "xlsx")            {                using var workbook = new XLWorkbook();                var ws = workbook.Worksheets.Add("Klienci");                ws.Cell(1, 1).Value = "Name";                ws.Cell(1, 2).Value = "Surname";                ws.Cell(1, 3).Value = "PESEL";                ws.Cell(1, 4).Value = "BirthYear";                ws.Cell(1, 5).Value = "Płec";                for (int i = 0; i < clients.Count; i++)                {                    ws.Cell(i + 2, 1).Value = clients[i].Name;                    ws.Cell(i + 2, 2).Value = clients[i].Surname;                    ws.Cell(i + 2, 3).Value = clients[i].PESEL;                    ws.Cell(i + 2, 4).Value = clients[i].BirthYear;                    ws.Cell(i + 2, 5).Value = clients[i].Płec;                }                using var stream = new MemoryStream();                workbook.SaveAs(stream);                return File(stream.ToArray(),                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",                    "klienci.xlsx");            }            else if (fileType == "csv")            {                var sb = new StringBuilder();                sb.AppendLine("Name,Surname,PESEL,BirthYear,Płec");                foreach (var c in clients)                {                    sb.AppendLine($"{c.Name},{c.Surname},{c.PESEL},{c.BirthYear},{c.Płec}");                }                return File(Encoding.UTF8.GetBytes(sb.ToString()), "text/csv", "klienci.csv");            }            return BadRequest("Bad file format");        }

        public IActionResult Print(int id)
        {
            var klient = _context.Klienci.FirstOrDefault(k => k.ID == id);
            if (klient == null)
                return NotFound();

            string url = Url.Action("View", "Home", new { id = id }, Request.Scheme);

            var renderer = new ChromePdfRenderer();
            var pdf = renderer.RenderUrlAsPdf(url);

            return File(pdf.BinaryData, "application/pdf", $"Faktura_{klient.Name}_{klient.Surname}.pdf");
        }

        public IActionResult View(int id)
        {
            var klient = _context.Klienci.FirstOrDefault(k => k.ID == id);
            if (klient == null)
                return NotFound();

            return View("Privacy", klient); 
        }


        //public async Task<IActionResult> Index()
        //{
        //    var klienci = await _context.Klienci.OrderBy(k =>k.ID).ToListAsync();
        //}
        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]        public IActionResult Error()        {            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });        }    }}


//https://localhost:7148/pdf/print?id=71

//http://localhost:7148/Home/View/71