using Microsoft.AspNetCore.Mvc;using Microsoft.EntityFrameworkCore;using System.Diagnostics;using WebApplication2.Models;using PESEL;using PESEL.Models;using PESEL.Validators.Impl;using System.Reflection.Metadata.Ecma335;using ClosedXML.Excel;using System.Text;using System.ComponentModel.DataAnnotations;using IronPdf;namespace WebApplication2.Controllers{    public class HomeController : Controller    {        private readonly ILogger<HomeController> _logger;        private readonly AppDbContext _context;        public HomeController(ILogger<HomeController> logger, AppDbContext context)        {            _logger = logger;            _context = context;        }        public async Task<IActionResult> Index()        {            try            {                var klienci = await _context.Klienci.OrderBy(k => k.ID).ToListAsync();                return View(klienci);            }            catch (Exception ex)            {                _logger.LogError(ex, "Error retrieving data from database");                return StatusCode(500, "Internal server error.");            }        }        public IActionResult Privacy()        {            return View();        }        public IActionResult Create()        {            return View();        }		private bool TryParsePesel(string pesel, out int birthYear, out int gender)		{			birthYear = 0;			gender = 0;			if (string.IsNullOrEmpty(pesel) || pesel.Length != 11 || !pesel.All(char.IsDigit))				return false;			int[] weights = { 1, 3, 7, 9, 1, 3, 7, 9, 1, 3 };			int sum = 0;			for (int i = 0; i < 10; i++)				sum += weights[i] * (pesel[i] - '0');			int control = (10 - (sum % 10)) % 10;			if (control != (pesel[10] - '0'))				return false;			int yearPart = int.Parse(pesel.Substring(0, 2));			int monthPart = int.Parse(pesel.Substring(2, 2));			int month = monthPart;			if (month >= 1 && month <= 12)				birthYear = 1900 + yearPart;			else if (month >= 21 && month <= 32)			{				birthYear = 2000 + yearPart;				month -= 20;			}			else			{				return false;			}			int genderDigit = int.Parse(pesel.Substring(9, 1));			gender = (genderDigit % 2 == 0) ? 0 : 1;			return true;		}		[HttpPost]		[ValidateAntiForgeryToken]		public async Task<IActionResult> Create(Klienci klient)		{			if (!ModelState.IsValid)				return View(klient);			if (!TryParsePesel(klient.PESEL, out int birthYear, out int gender))			{				ModelState.AddModelError("PESEL", "Numer PESEL jest nieprawidłowy");				return View(klient);			}			klient.BirthYear = birthYear;			klient.Płec = gender;			var existingClient = await _context.Klienci.FirstOrDefaultAsync(c => c.PESEL == klient.PESEL);			if (existingClient != null)			{				existingClient.Name = klient.Name;				existingClient.Surname = klient.Surname;				existingClient.BirthYear = birthYear;				existingClient.Płec = gender;			 				_context.Klienci.Update(existingClient);				//_context.Klienci.Remove(klient);			}			else			{				_context.Klienci.Add(klient);			}			await _context.SaveChangesAsync();			return RedirectToAction("Index");		}		//[HttpPost]		//[ValidateAntiForgeryToken]		//public async Task<IActionResult> Edit(Klienci klient)		//{		//	if (ModelState.IsValid)		//	{		//		_context.Klienci.Update(klient); 		//		await _context.SaveChangesAsync();		//		return RedirectToAction(nameof(Index));		//	}		//	return View(klient);		//}		// POST: Movies/Edit/5		// To protect from overposting attacks, enable the specific properties you want to bind to.		// For more details, see http://go.microsoft.com/fwlink/?LinkId=317598.		//[HttpPost]		//[ValidateAntiForgeryToken]		public async Task<IActionResult> Edit(int? id)        {            if (id == null)            {                return NotFound();            }            var klient = await _context.Klienci.FindAsync(id);            if (klient == null)            {                return NotFound();            }            return View(klient);        }		[HttpPost]		[ValidateAntiForgeryToken]		public async Task<IActionResult> Edit(int id, Klienci model)		{			if (!ModelState.IsValid)				return View(model);			if (!TryParsePesel(model.PESEL, out int birthYear, out int gender))			{				ModelState.AddModelError("PESEL", "Numer PESEL jest nieprawidłowy");				return View(model);			}			var klient = await _context.Klienci.FindAsync(id);			if (klient == null)				return NotFound();			var existingClient = await _context.Klienci				.FirstOrDefaultAsync(c => c.PESEL == model.PESEL && c.ID != id);			if (existingClient != null)			{				existingClient.Name = model.Name;				existingClient.Surname = model.Surname;				existingClient.BirthYear = birthYear;				existingClient.Płec = gender;				_context.Klienci.Update(existingClient);				_context.Klienci.Remove(klient);			}			else			{				klient.Name = model.Name;				klient.Surname = model.Surname;				klient.PESEL = model.PESEL;				klient.BirthYear = birthYear;				klient.Płec = gender;				_context.Klienci.Update(klient);			}			await _context.SaveChangesAsync();			return RedirectToAction(nameof(Index));		}		private bool KlientExists(int id)        {            return _context.Klienci.Any(e => e.ID == id);        }        public async Task<IActionResult> Delete(int id)        {            var klient = await _context.Klienci.FindAsync(id);            if (klient != null)            {                _context.Klienci.Remove(klient);                await _context.SaveChangesAsync();                return RedirectToAction(nameof(Index));            }            return View(klient);        }        public IActionResult ImportExport()        {            return View();		}		//        if (!TryParsePesel(client.PESEL, out int birthYear, out int gender))		//{		//    continue; 		//}		//client.BirthYear = birthYear;		//client.Płec = gender;		[HttpPost]		public async Task<IActionResult> Import(IFormFile file, string fileType)		{			if (file == null || file.Length == 0)				return BadRequest("Select a file");			var clients = new List<Klienci>();			var invalidClients = new List<string>();			using (var stream = new MemoryStream())			{				await file.CopyToAsync(stream);				if (fileType == "xlsx")				{					using var workbook = new XLWorkbook(stream);					var worksheet = workbook.Worksheets.First();					var rows = worksheet.RangeUsed().RowsUsed().Skip(1);					foreach (var row in rows)					{						var pesel = row.Cell(3).GetValue<string>().Trim();						if (!TryParsePesel(pesel, out int birthYear, out int gender))						{							invalidClients.Add($"{row.Cell(1).GetValue<string>()}" +								$" {row.Cell(2).GetValue<string>()} - PESEL niepoprawny");							continue;						}						var existingClient = await _context.Klienci.FirstOrDefaultAsync(c => c.PESEL == pesel);						if (existingClient != null)						{							existingClient.Name = row.Cell(1).GetValue<string>();							existingClient.Surname = row.Cell(2).GetValue<string>();							existingClient.BirthYear = birthYear;							existingClient.Płec = gender;							_context.Klienci.Update(existingClient);						}						else						{							clients.Add(new Klienci							{								Name = row.Cell(1).GetValue<string>(),								Surname = row.Cell(2).GetValue<string>(),								PESEL = pesel,								BirthYear = birthYear,								Płec = gender							});						}					}				}				else if (fileType == "csv")				{					stream.Position = 0;					using var reader = new StreamReader(stream, Encoding.UTF8);					var csvLines = reader.ReadToEnd().Split('\n').Skip(1);					foreach (var line in csvLines)					{						var values = line.Split(',');						if (values.Length >= 3 && !string.IsNullOrWhiteSpace(values[0]))						{							var pesel = values[2].Trim();							if (!TryParsePesel(pesel, out int birthYear, out int gender))							{								invalidClients.Add($"{values[0].Trim()} {values[1].Trim()} - PESEL niepoprawny");								continue;							}							var existingClient = await _context.Klienci.FirstOrDefaultAsync(c => c.PESEL == pesel);							if (existingClient != null)							{								existingClient.Name = values[0].Trim();								existingClient.Surname = values[1].Trim();								existingClient.BirthYear = birthYear;								existingClient.Płec = gender;								_context.Klienci.Update(existingClient);							}							else							{								clients.Add(new Klienci								{									Name = values[0].Trim(),									Surname = values[1].Trim(),									PESEL = pesel,									BirthYear = birthYear,									Płec = gender								});							}						}					}				}			}			if (clients.Count > 0)			{				_context.Klienci.AddRange(clients);			}			await _context.SaveChangesAsync();			if (invalidClients.Count > 0)			{				TempData["InvalidClients"] = string.Join("<br/>", invalidClients);			}			return RedirectToAction("Index");		}		[HttpGet]        public async Task<IActionResult> Export(string fileType)        {            var clients = await _context.Klienci.ToListAsync();            if (fileType == "xlsx")            {                using var workbook = new XLWorkbook();                var ws = workbook.Worksheets.Add("Klienci");                ws.Cell(1, 1).Value = "Name";                ws.Cell(1, 2).Value = "Surname";                ws.Cell(1, 3).Value = "PESEL";                ws.Cell(1, 4).Value = "BirthYear";                ws.Cell(1, 5).Value = "Płec";                for (int i = 0; i < clients.Count; i++)                {                    ws.Cell(i + 2, 1).Value = clients[i].Name;                    ws.Cell(i + 2, 2).Value = clients[i].Surname;                    ws.Cell(i + 2, 3).Value = clients[i].PESEL;                    ws.Cell(i + 2, 4).Value = clients[i].BirthYear;                    ws.Cell(i + 2, 5).Value = clients[i].Płec;                }                using var stream = new MemoryStream();                workbook.SaveAs(stream);                return File(stream.ToArray(),                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",                    "klienci.xlsx");            }            else if (fileType == "csv")            {                var sb = new StringBuilder();                sb.AppendLine("Name,Surname,PESEL,BirthYear,Płec");                foreach (var c in clients)                {                    sb.AppendLine($"{c.Name},{c.Surname},{c.PESEL},{c.BirthYear},{c.Płec}");                }                return File(Encoding.UTF8.GetBytes(sb.ToString()), "text/csv", "klienci.csv");            }            return BadRequest("Bad file format");        }        public IActionResult GenerateInvoice()        {            string htmlContent = @"<!DOCTYPE html><html lang='pl'><head>    <meta charset='UTF-8'>    <title>Faktura VAT</title>    <style>        body { font-family: Arial, sans-serif; margin: 30px; font-size: 12px; color: #000; }        h1 { text-align: center; margin: 20px 0; }        .header { display: flex; justify-content: space-between; margin-bottom: 20px; }        .header-left img { height: 40px; }        .header-right table { border-collapse: collapse; font-size: 12px; }        .header-right td { padding: 2px 6px; }        .seller-buyer { display: flex; justify-content: space-between; margin-bottom: 20px; }        .box { border: 1px solid #000; padding: 8px; width: 45%; font-size: 12px; }        .box-title { font-weight: bold; margin-bottom: 5px; }        table.invoice { width: 100%; border-collapse: collapse; margin-bottom: 20px; }        table.invoice th, table.invoice td {            border: 1px solid #000;            padding: 6px;            text-align: center;            font-size: 12px;        }        table.invoice th { background: #f2f2f2; }        .payment { margin: 20px 0; font-size: 12px; }        .payment p { margin: 4px 0; }        .notes { margin: 20px 0; font-size: 11px; }        .signatures { display: flex; justify-content: space-between; margin-top: 40px; }        .signature-box {            border: 1px solid #000;            width: 45%;            height: 70px;            font-size: 11px;            display: flex;            justify-content: center;            align-items: flex-end;            padding-bottom: 5px;            text-align: center;        }        .qr { text-align: center; margin: 20px 0; }        .footer { font-size: 10px; text-align: left; margin-top: 40px; color: #555; }    </style></head><body>    <div class='header'>        <div class='header-left'>            <h2 style='color:#2a61d4;'>Fakturowo</h2>        </div>        <div class='header-right'>            <table>                <tr><td>Miejsce wystawienia</td><td><b>Warszawa</b></td></tr>                <tr><td>Data wystawienia</td><td>13-12-2024</td></tr>                <tr><td>Data sprzedaży</td><td>13-12-2024</td></tr>            </table>        </div>    </div>    <div class='seller-buyer'>        <div class='box'>            <div class='box-title'>Sprzedawca</div>            Usługi Informatyczne Jan Nowak<br/>            NIP: 1233435678<br/>            Kowalska 22 / 6B<br/>            00-001 Warszawa        </div>        <div class='box'>            <div class='box-title'>Nabywca</div>            ABC INFO Andrzej Kowalski<br/>            NIP: 2345683788<br/>            Nowakowska 12 / 5<br/>            22-102 Góra Kalwaria        </div>    </div>    <h1>Faktura VAT 51952/12/2024</h1>    <table class='invoice'>        <thead>            <tr>                <th>Lp.</th>                <th>Nazwa towaru lub usługi</th>                <th>Kod GTU</th>                <th>Jm.</th>                <th>Ilość</th>                <th>Cena netto</th>                <th>Wartość netto</th>                <th>Stawka VAT</th>                <th>Kwota VAT</th>                <th>Wartość brutto</th>            </tr>        </thead>        <tbody>            <tr>                <td>1</td>                <td>Nazwa towaru lub usługi</td>                <td>GTU_12</td>                <td>usł.</td>                <td>1</td>                <td>1 000,00</td>                <td>1 000,00</td>                <td>23%</td>                <td>230,00</td>                <td>1 230,00</td>            </tr>            <tr>                <td colspan='6'></td>                <td>1 000,00</td>                <td>23%</td>                <td>230,00</td>                <td>1 230,00</td>            </tr>            <tr>                <td colspan='6' style='font-weight:bold;'>Razem</td>                <td style='font-weight:bold;'>1 000,00</td>                <td></td>                <td style='font-weight:bold;'>230,00</td>                <td style='font-weight:bold;'>1 230,00</td>            </tr>        </tbody>    </table>    <div class='payment'>        <p><b>Sposób płatności:</b> przelew</p>        <p><b>Termin płatności:</b> 14 dni</p>        <p><b>Do zapłaty:</b> 1 230,00 PLN</p>        <p><b>Słownie:</b> jeden tysiąc dwieście trzydzieści 00/100 PLN</p>        <p><b>Rachunek bankowy:</b><br/>Mbank<br/>10 1000 2000 3000 4000 5000 6000</p>    </div>    <div class='notes'>        <b>Uwagi:</b><br/>        Fakturowo.pl to jeden z najprostszych programów do tworzenia dokumentów księgowych online.        Zadbaliśmy o to, aby interfejs programu był banalnie prosty, a wystawianie dokumentów było szybkie oraz intuicyjne.    </div>    <div class='qr'>        <img src='https://api.qrserver.com/v1/create-qr-code/?size=80x80&data=Faktura' alt='QR Code' />    </div>    <div class='signatures'>        <div class='signature-box'>Podpis osoby upoważnionej do wystawienia</div>        <div class='signature-box'>Podpis osoby upoważnionej do odbioru</div>    </div>    <div class='footer'>Fakturowo.pl</div></body></html>";            var renderer = new ChromePdfRenderer();            var pdf = renderer.RenderHtmlAsPdf(htmlContent);            return File(pdf.BinaryData, "application/pdf", "Faktura.pdf");        }        //public async Task<IActionResult> Index()        //{        //    var klienci = await _context.Klienci.OrderBy(k =>k.ID).ToListAsync();        //}        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]        public IActionResult Error()        {            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });        }    }}


//https://localhost:7148/pdf/print?id=71